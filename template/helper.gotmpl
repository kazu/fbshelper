package {{.PkgName}}

import (
    "bytes"
    flatbuffers "github.com/google/flatbuffers/go"
)

type {{.Name}}Message struct {

{{- range $i, $v := .Fields}}
    {{$i}} {{$v}}
{{- end }}

    Dirty bool
    cache *{{.Name}}
}

func New{{.Name}}MessageFromFbs(fbs *{{.Name}}) (m *{{.Name}}Message) {
    m = &{{.Name}}Message{}
    {{ $IsUnion := .IsUnion}}
    {{ $StructName := .Name }}
    {{- range $i, $v := .Fields}}
            // set {{$i}}
        {{- if eq (isSlice $v) false }}
            {{- if eq (isMessage $v) true }}
                {{- if eq (isUnion $IsUnion $i) true }}
            {{$i}}unionTable := new(flatbuffers.Table)
            fbs.{{$i}}({{$i}}unionTable)
            m.{{$i}} = Union{{$i}}({{$i}}unionTable, fbs.{{$i}}Type())
                {{- else }}
            m.{{$i}} = New{{(toBareType $v)}}FromFbs(fbs.{{$i}}(nil))
                {{- end }}
            {{- else }}
            m.{{$i}} = fbs.{{$i}}()
            {{- end }}
        {{- else }}
            m.{{$i}} = make({{$v}}, fbs.{{$i}}Length())
            for i := 0; i < fbs.{{$i}}Length(); i++ {
                {{- if eq (isMessage $v) true }}
                fbs.{{$i}}(m.{{$i}}[i].cache, i)
                {{- else }}
                m.{{$i}}[i] = fbs.{{$i}}(i)
                {{- end }}
            }
        {{- end }}

    {{- end}}
    m.Dirty = false
    m.cache = fbs
    return

}

func (m *{{.Name}}Message) ApplyUpdated() bool {
    if m.cache == nil {
        return false
    }
    {{range $i, $v := .Fields}}
        {{- if eq (isMessage $v) false }}
            {{- if eq (isSlice $v) false }}
                // {{$i}} is not slice, not message
                if m.{{$i}} != m.cache.{{$i}}() {
                    if !m.cache.Mutate{{$i}}(m.{{$i}}) {
                        return false
                    }
                }
            {{- else }}
                // {{$i}} is not message, slice
                for i := 0; i < m.cache.{{$i}}Length() ; i++ {
                    if m.{{$i}}[i] != m.cache.{{$i}}(i) {
                        return false
                    }
                }
            {{- end}}
        {{- else }}
            {{- if eq (isSlice $v) false }}
                // {{$i}} is message, not slice 
                if !m.{{$i}}.Equal(m.cache.{{$i}}(nil)) {
                    return false
                }
            {{- else }}
                // {{$i}} is message, slice
                tmps := make({{$v}}, 1)
                for i := 0; i < m.cache.{{$i}}Length() ; i++ {
                    tmp := tmps[0]
                    m.cache.{{$i}}(tmp.cache, i)
                    if m.{{$i}}[i] != tmp {
                        return false
                    }
                }
            {{- end }}
        {{- end }}
    {{end}}

    return true
}

func (m *{{.Name}}Message) ToFbs(check bool) (fbs *{{.Name}}) {
    if !check && m.cache != nil {
        return m.cache
    }
    if m.ApplyUpdated() {
        return m.cache
    }
    m.Dirty = true
    // 作成処理
    /*
          fbs = ...   
          m.cache = fbs
    
    */
    var builder *flatbuffers.Builder
    var offset flatbuffers.UOffsetT
    if m.cache != nil {
        builder = &flatbuffers.Builder{}
        builder.Bytes = fbs.Table().Bytes
        builder.Reset()
    }else{
        builder = flatbuffers.NewBuilder(0)
    }

    builder, offset = m.encoding(builder)
    _ = offset
    //builder, _ = m.encoding(builder)
    
    {{- if eq .IsTable false }}
    m.cache = &{{.Name}}{}
    //builder.Finish(m.cache)
    m.cache.Init(builder.FinishedBytes(), 0)
    {{- else }}
    builder.Finish(offset)
    m.cache = GetRootAs{{.Name}}(builder.FinishedBytes(), 0)
    {{- end }}
    return m.cache
}
/*
{{range $i, $v := .Fields}}
     {{- if eq (isSlice $v) true }}

     {{- else }}
     {{- end }}
{{end}}


    return m.cache
}
*/

func (src *{{.Name}}Message) Equal(dst *{{.Name}}) bool {

    if src.cache == dst {
        return true
    }

    if src.cache == nil {
        return false
    }
    isSameData := func(srct flatbuffers.Table, dstt flatbuffers.Table) bool {
        slen := len(srct.Bytes) - int(srct.Pos)
        dlen := len(dstt.Bytes) - int(dstt.Pos)
        if slen != dlen {
            return false
        }
        // FIXME: checking per Fields
        if bytes.Equal(srct.Bytes[int(srct.Pos):], dstt.Bytes[int(dstt.Pos):] ){
            return true
        }
        return false
    }

    return isSameData(src.cache.Table(), dst.Table())

}


func (m *{{.Name}}Message) encoding(builder *flatbuffers.Builder)  (*flatbuffers.Builder, flatbuffers.UOffsetT) {

{{ $StructName := .Name }}

{{- if eq .IsTable false }}

offset := Create{{.Name}}(builder, 
    {{- range $i, $v := .Fields}}
        m.{{$i}}, 
    {{- end}}
)
return builder, offset

{{- else}}
// pre-creation
{{range $i, $v := .Fields}}
    {{- if eq (isSlice $v) true }}
        {{- if eq (isMessage $v) true }}
            // {{$i}} is slice and message
            var {{$i}}Ptr  flatbuffers.UOffsetT
            if len(m.{{$i}}) > 0 {
                ptrs := make([]flatbuffers.UOffsetT, 0, len(m.{{$i}}))
                for _, child := range m.{{$i}} {
                    var offset  flatbuffers.UOffsetT
                    builder, offset = child.encoding(builder)
                    ptrs = append(ptrs, offset)
                }

                {{$StructName}}Start{{$i}}Vector(builder, len(ptrs))
                for i := len(ptrs) - 1; i >= 0; i-- {
                    builder.PrependUOffsetT(ptrs[i])
                }
                {{$i}}Ptr  = builder.EndVector(len(ptrs))
            }
        {{- else }}
            // {{$i}} is slice and not message
            var {{$i}}Ptr  flatbuffers.UOffsetT
            {{$StructName}}Start{{$i}}Vector(builder, len(m.{{$i}}))
            for i := len(m.{{$i}}) - 1; i >= 0; i-- {
                builder.Prepend{{(toCamel $v)}}(m.{{$i}}[i])
            }
            {{$i}}Ptr  = builder.EndVector(len(m.{{$i}}))

        {{- end}}
    {{- else }}
        {{- if eq (isMessage $v) true }}
            var {{$i}}Ptr  flatbuffers.UOffsetT
            builder, {{$i}}Ptr = m.{{$i}}.encoding(builder)
        {{- end}}
     {{- end }}
{{end}}

    {{$StructName}}Start(builder)
    // store
{{range $i, $v := .Fields}}
    {{- if eq (isSlice $v) true }}
        {{$StructName}}Add{{$i}}(builder, {{$i}}Ptr)  
    {{- else }}
        {{- if eq (isMessage $v) true }}
            {{$StructName}}Add{{$i}}(builder, {{$i}}Ptr)
        {{- else}}
            {{$StructName}}Add{{$i}}(builder, m.{{$i}})    
        {{- end}}
    {{- end}}
{{- end}}    
    offset := {{$StructName}}End(builder)
    return builder, offset

{{- end }}


}
