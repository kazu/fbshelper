
// Code generated by genmaps.go; DO NOT EDIT.
// template file is https://github.com/kazu/fbshelper/blob/master/template/query.go.tmpl github.com/kazu/fbshelper/template/query.go.tmpl 
//   https://github.com/kazu/fbshelper/blob/master/template/union.query.go.tmpl


package vfs_schema

import (
    flatbuffers "github.com/google/flatbuffers/go"
    base "github.com/kazu/fbshelper/query/base"
)

const (
    DUMMY_IndexNum = flatbuffers.VtableMetadataFields
)

type FbsIndexNum struct {
	*base.Node
}


type FbsIndexNumMaps struct {
    *base.NodeList
}
func (node FbsIndexNum) Info() base.Info {

    info := base.Info{Pos: node.Pos, Size: -1}
    for i := 0; i < len(node.VTable); i++ {
        vInfo := node.ValueInfo(i)
        if info.Pos + info.Size < vInfo.Pos + vInfo.Size {
            info.Size = (vInfo.Pos + vInfo.Size) - info.Pos
        }
    }
    return info    
}

func (node FbsIndexNum) ValueInfo(i int) base.ValueInfo {

    switch i {
    case 0:
        if node.ValueInfos[i].IsNotReady() {
            node.ValueInfoPos(i)
        }
        node.ValueInfos[i].Size = base.SizeOfint32
    case 1:
         if node.ValueInfos[i].IsNotReady() {
            node.ValueInfoPosList(i)
        }
        node.ValueInfos[i].Size = node.Maps().Info().Size
     }
     return node.ValueInfos[i]
}





func (node FbsIndexNum) Size() int32 {
    if node.VTable[0] == 0 {
        return int32(0)
    }
    return int32(flatbuffers.GetInt32(node.ValueNormal(0)))
}


func (node FbsIndexNum) Maps() FbsIndexNumMaps {
    if node.VTable[1] == 0 {
        return FbsIndexNumMaps{}
    }
    nodelist :=  node.ValueList(1)
    return FbsIndexNumMaps{
                NodeList: &nodelist,
    }
}






func (node FbsIndexNumMaps) At(i int) FbsInvertedMapNum {
    if i > int(node.ValueInfo.VLen) || i < 0 {
		return FbsInvertedMapNum{}
	}

	buf := node.Bytes
	ptr := uint32(node.ValueInfo.Pos + (i-1)*4)
	return FbsInvertedMapNum{Node: base.NewNode(node.Base, int(ptr+flatbuffers.GetUint32(buf[ptr:])))}
}


func (node FbsIndexNumMaps) First() FbsInvertedMapNum {
	return node.At(0)
}


func (node FbsIndexNumMaps) Last() FbsInvertedMapNum {
	return node.At(int(node.ValueInfo.VLen))
}

func (node FbsIndexNumMaps) Select(fn func(m FbsInvertedMapNum) bool) []FbsInvertedMapNum {

	result := make([]FbsInvertedMapNum, 0, int(node.ValueInfo.VLen))
	for i := 0; i < int(node.ValueInfo.VLen); i++ {
		if m := node.At(i); fn(m) {
			result = append(result, m)
		}
	}
	return result
}

func (node FbsIndexNumMaps) Find(fn func(m FbsInvertedMapNum) bool) FbsInvertedMapNum{

	for i := 0; i < int(node.ValueInfo.VLen); i++ {
		if m := node.At(i); fn(m) {
			return m
		}
	}
	return FbsInvertedMapNum{}
}

func (node FbsIndexNumMaps) All() []FbsInvertedMapNum {
	return node.Select(func(m FbsInvertedMapNum) bool { return true })
}

func (node FbsIndexNumMaps) Count() int {
	return int(node.ValueInfo.VLen)
}

func (node FbsIndexNumMaps) Info() base.Info {

    info := base.Info{Pos: node.ValueInfo.Pos, Size: -1}
    vInfo := node.Last().Info()



    if info.Pos + info.Size < vInfo.Pos + vInfo.Size {
        info.Size = (vInfo.Pos + vInfo.Size) - info.Pos
    }
    return info
}
