
// Code generated by genmaps.go; DO NOT EDIT.
// template file is https://github.com/kazu/fbshelper/blob/master/template/query.go.tmpl github.com/kazu/fbshelper/template/query.go.tmpl 
//   https://github.com/kazu/fbshelper/blob/master/template/union.query.go.tmpl


package vfs_schema

import (
    flatbuffers "github.com/google/flatbuffers/go"
    base "github.com/kazu/fbshelper/query/base"
    "reflect"
)

const (
    DUMMY_InvertedMapNum = flatbuffers.VtableMetadataFields
)

const (
        InvertedMapNum_Key =     0
        InvertedMapNum_Value =     1
)

var InvertedMapNum_FieldEnum = map[string]int{
        "Key": InvertedMapNum_Key,
        "Value": InvertedMapNum_Value,
}



type FbsInvertedMapNum struct {
	*base.Node
}



func (node FbsInvertedMapNum) SearchInfo(pos int, fn RecFn, condFn CondFn) {

	info := node.Info()

	if condFn(pos, info) {
		fn(base.NodePath{Name: "InvertedMapNum", Idx: -1}, info)
	}else{
        return
    }

	for i := 0; i < node.CountOfField(); i++ {
		if node.IsLeafAt(i) {
			fInfo := base.Info(node.ValueInfo(i))
			if condFn(pos, fInfo) {
				fn(base.NodePath{Name: "InvertedMapNum", Idx: i}, fInfo)
			}
			continue
		}
        switch i {
        case 0:
        case 1:
                node.Value().SearchInfo(pos, fn, condFn)    
        default:
			base.Log(base.LOG_ERROR, func() base.LogArgs {
				return F("node must be Noder")
			})
        }

	}

}
func (node FbsInvertedMapNum) Info() base.Info {

    info := base.Info{Pos: node.Pos, Size: -1}
    for i := 0; i < len(node.VTable); i++ {
        vInfo := node.ValueInfo(i)
        if info.Pos + info.Size < vInfo.Pos + vInfo.Size {
            info.Size = (vInfo.Pos + vInfo.Size) - info.Pos
        }
    }
    return info    
}


func (node FbsInvertedMapNum) IsLeafAt(i int) bool {
    switch i {
    case 0:
        return true
    case 1:
        return false
    }
    return false
}
func (node FbsInvertedMapNum) ValueInfo(i int) base.ValueInfo {

    switch i {
    case 0:
        if node.ValueInfos[i].IsNotReady() {
            node.ValueInfoPos(i)
        }
        node.ValueInfos[i].Size = base.SizeOfint64
    case 1:
        if node.ValueInfos[i].IsNotReady() {
            node.ValueInfoPos(i)
        }
        node.ValueInfos[i].Size = node.Value().Info().Size
     }
     return node.ValueInfos[i]
}


func (node FbsInvertedMapNum) FieldAt(i int) interface{} {

    switch i {
    case 0:
        return node.Key()
    case 1:
        return node.Value()
     }
     return nil
}


// Unmarsla parse flatbuffers data and store the result
// in the value point to by v, if v is ni or not pointer,
// Unmarshal returns an ERR_MUST_POINTER, ERR_INVALID_TYPE
func (node FbsInvertedMapNum) Unmarshal(v interface{}) error {

    return node.Node.Unmarshal(v, func(s string, rv reflect.Value) error {
        
        switch InvertedMapNum_FieldEnum[s] {
        case InvertedMapNum_Key:
            //return node.Key()
            rv.Set(reflect.ValueOf(  node.Key() ))
        }
        return nil
    })

}




func (node FbsInvertedMapNum) Key() int64 {
    if node.VTable[0] == 0 {
        return int64(0)
    }
    return int64(flatbuffers.GetInt64(node.ValueNormal(0)))
}


func (node FbsInvertedMapNum) Value() FbsRecord {    
   if node.VTable[1] == 0 {
        return FbsRecord{}  
    }
    return FbsRecord{Node: node.ValueStruct(1)}

}



// CountOfField ... returns count of table/struct fields
func (node FbsInvertedMapNum) CountOfField() int {
    return 2
}

// SetKey ... store v value to {$v.Name}} field.
func (node FbsInvertedMapNum) SetKey(v int64) error {    
        buf := node.ValueNormal(InvertedMapNum_Key )   
        if len(buf) < base.SizeOfint64 {
            return base.ERR_MORE_BUFFER
        }
        flatbuffers.WriteInt64(buf, int64(v))
        return nil
}

// SetValue ... store v value to {$v.Name}} field.
func (node FbsInvertedMapNum) SetValue(v FbsRecord) error {    
        return base.ERR_NO_SUPPORT
}
