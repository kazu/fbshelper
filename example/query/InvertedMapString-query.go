
// Code generated by genmaps.go; DO NOT EDIT.
// template file is https://github.com/kazu/fbshelper/blob/master/template/query.go.tmpl github.com/kazu/fbshelper/template/query.go.tmpl 
//   https://github.com/kazu/fbshelper/blob/master/template/union.query.go.tmpl


package vfs_schema

import (
    flatbuffers "github.com/google/flatbuffers/go"
    base "github.com/kazu/fbshelper/query/base"
    "reflect"
)

const (
    DUMMY_InvertedMapString = flatbuffers.VtableMetadataFields
)

const (
        InvertedMapString_Key =     0
        InvertedMapString_Value =     1
)

var InvertedMapString_FieldEnum = map[string]int{
        "Key": InvertedMapString_Key,
        "Value": InvertedMapString_Value,
}



type FbsInvertedMapString struct {
	*base.Node
}


func (node FbsInvertedMapString) Info() base.Info {

    info := base.Info{Pos: node.Pos, Size: -1}
    for i := 0; i < len(node.VTable); i++ {
        vInfo := node.ValueInfo(i)
        if info.Pos + info.Size < vInfo.Pos + vInfo.Size {
            info.Size = (vInfo.Pos + vInfo.Size) - info.Pos
        }
    }
    return info    
}


func (node FbsInvertedMapString) IsLeafAt(i int) bool {
    switch i {
    case 0:
        return true
    case 1:
        return false
    }
    return false
}


func (node FbsInvertedMapString) ValueInfo(i int) base.ValueInfo {

    switch i {
    case 0:
        if node.ValueInfos[i].IsNotReady() {
            node.ValueInfoPosBytes(i)
        }
    case 1:
        if node.ValueInfos[i].IsNotReady() {
            node.ValueInfoPos(i)
        }
        node.ValueInfos[i].Size = node.Value().Info().Size
     }
     return node.ValueInfos[i]
}

func (node FbsInvertedMapString) FieldAt(i int) interface{} {

    switch i {
    case 0:
        return node.Key()
    case 1:
        return node.Value()
     }
     return nil
}


// Unmarsla parse flatbuffers data and store the result
// in the value point to by v, if v is ni or not pointer,
// Unmarshal returns an ERR_MUST_POINTER, ERR_INVALID_TYPE
func (node FbsInvertedMapString) Unmarshal(v interface{}) error {

    return node.Node.Unmarshal(v, func(s string, rv reflect.Value) error {
        
        switch InvertedMapString_FieldEnum[s] {
        case InvertedMapString_Key:
            //return node.Key()
            rv.Set(reflect.ValueOf(  node.Key() ))
        }
        return nil
    })

}




func (node FbsInvertedMapString) Key() []byte {
    if node.VTable[0] == 0 {
        return nil
    }
    return node.ValueBytes(0)
}


func (node FbsInvertedMapString) Value() FbsRecord {    
   if node.VTable[1] == 0 {
        return FbsRecord{}  
    }
    return FbsRecord{Node: node.ValueStruct(1)}

}




func (node FbsInvertedMapString) CountOfField() int {
    return 2
}
