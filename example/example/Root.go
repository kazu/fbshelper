// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Root struct {
	_tab flatbuffers.Table
}

func GetRootAsRoot(buf []byte, offset flatbuffers.UOffsetT) *Root {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Root{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Root) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Root) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Root) MoveState(obj *MoveState) *MoveState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(MoveState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Root) ActionType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Root) MutateActionType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Root) Action(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Root) ActionTime(obj *Time) *Time {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Time)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Root) Time(obj *Time) *Time {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Time)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RootStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func RootAddMoveState(builder *flatbuffers.Builder, moveState flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(moveState), 0)
}
func RootAddActionType(builder *flatbuffers.Builder, actionType byte) {
	builder.PrependByteSlot(1, actionType, 0)
}
func RootAddAction(builder *flatbuffers.Builder, action flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(action), 0)
}
func RootAddActionTime(builder *flatbuffers.Builder, actionTime flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(actionTime), 0)
}
func RootAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(time), 0)
}
func RootEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
