// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import "github.com/kazu/fbshelper/query/base"

type HogesList struct { // genny
	*CommonNode
}

// Hoges genny
func NewHogesList() *HogesList {

	list := emptyHogesList()
	list.NodeList = &base.NodeList{}
	list.CommonNode.Name = "[]Hoges"

	list.InitList()
	return list
}

func emptyHogesList() *HogesList {
	return &HogesList{CommonNode: &base.CommonNode{}}
}

func (node HogesList) At(i int) (result *Hoges, e error) {
	result = &Hoges{}
	result.CommonNode, e = node.CommonNode.At(i)
	return
}

func (node HogesList) SetAt(i int, v *Hoges) error {
	return node.CommonNode.SetAt(i, v.CommonNode)
}

func (node HogesList) First() (result *Hoges, e error) {
	return node.At(0)
}

func (node HogesList) Last() (result *Hoges, e error) {
	return node.At(int(node.NodeList.ValueInfo.VLen) - 1)
}

func (node HogesList) Select(fn func(*Hoges) bool) (result []*Hoges) {
	result = make([]*Hoges, 0, int(node.NodeList.ValueInfo.VLen))
	commons := node.CommonNode.Select(func(cm *CommonNode) bool {
		return fn(&Hoges{CommonNode: cm})
	})
	for _, cm := range commons {
		result = append(result, &Hoges{CommonNode: cm})
	}
	return result
}

func (node HogesList) Find(fn func(*Hoges) bool) *Hoges {
	result := &Hoges{}
	result.CommonNode = node.CommonNode.Find(func(cm *CommonNode) bool {
		return fn(&Hoges{CommonNode: cm})
	})
	return result
}

func (node HogesList) All() []*Hoges {
	return node.Select(func(*Hoges) bool { return true })
}

func (node HogesList) Count() int {
	return int(node.NodeList.ValueInfo.VLen)
}

// Search ... binary search
func (node HogesList) Search(fn func(*Hoges) bool) *Hoges {
	result := &Hoges{}

	i := node.CommonNode.SearchIndex(int(node.VLen()), func(cm *CommonNode) bool {
		return fn(&Hoges{CommonNode: cm})
	})
	if i < int(node.VLen()) {
		result, _ = node.At(i)
	}

	return result
}
