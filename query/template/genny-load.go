package query

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _template_genny_dummy_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x3d\x6e\xc3\x30\x0c\x85\x67\xf3\x14\x44\x86\x20\xc9\x10\xed\xdd\x8a\xee\x19\x8a\x5e\x40\x72\x68\x5b\x88\x28\xa9\x12\x39\xa8\x86\xef\x5e\xb8\x3f\xb0\xa7\xa2\x1b\xf1\xf8\xf1\x7b\xcc\xb6\x7f\xd8\x91\xf0\x5d\xa9\x34\x00\x63\x50\x26\x5f\xd1\x57\xbc\x2b\x73\xc3\x91\x62\x6c\x28\xc4\x39\x58\x21\x1c\x7c\x20\xf0\x9c\x53\x11\x3c\x41\x77\x18\xbd\x4c\xea\xae\x7d\x62\xf3\xb0\x1f\x6a\x06\x57\x27\x0a\x99\x8a\xf9\x12\x1a\x67\x2b\x1d\xa0\x73\xf8\x4f\xf2\x0c\x20\x2d\x13\xbe\x52\xd5\x20\x6f\xeb\x78\x4b\x77\xba\x59\xa6\xdf\x4d\x4a\xdf\x79\x95\xa2\xbd\xe0\x0c\xdd\xc5\x5d\x5f\x12\x73\x8a\x2b\x0a\xcb\x0f\xf8\x1c\xbc\xad\xeb\xe1\x5f\xe4\xa0\xb1\x47\xe2\x2c\x6d\x6b\x3c\x9d\xf1\xb2\xeb\x9f\xa1\x2b\x24\x5a\x22\x1e\xb7\x74\xde\x34\x4f\x78\x5c\x7f\xdf\x89\xe7\x65\x81\x05\x3e\x03\x00\x00\xff\xff\x5a\xb0\xe9\x4a\x5a\x01\x00\x00")

func template_genny_dummy_go() ([]byte, error) {
	return bindata_read(
		_template_genny_dummy_go,
		"../template/genny/dummy.go",
	)
}

var _template_genny_field_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x4b\xcf\xd3\x30\x10\x3c\x77\x7f\xc5\xca\x27\xbb\x2a\xf1\x1d\x29\x48\x9f\xc4\x43\x48\xb4\x07\x28\x07\x4e\x55\x1e\xdb\xd6\x6a\xfc\xc0\xb1\x51\x03\xe2\xbf\x23\x3b\x69\x52\xa0\x6a\x0e\x89\x67\x67\x76\x76\xd6\x71\x55\x73\xa9\x4e\x84\xdf\x23\xf9\x01\x40\x69\x67\x7d\x40\x0e\x2b\x76\x52\xe1\x1c\xeb\xa2\xb1\x5a\x36\x67\xa2\xcb\x50\xab\xd0\xcb\x13\x19\x33\xa4\x37\x79\xd5\xb0\xbf\x65\x97\xea\x67\x94\xc7\xba\x3f\x53\xe7\xc8\xcb\x6c\x29\xeb\xaa\x27\x06\x02\x40\xae\x21\x37\xa3\x8e\x7d\xc0\x9a\xb0\xa9\xba\x8e\x5a\x74\xe4\xf1\xbd\xa2\xae\x85\xb5\x04\x08\x83\xa3\x11\xee\x2a\x4d\x38\x0d\x2a\xf6\x83\xa3\x7b\x32\xe1\x7f\xc8\x1f\x95\x4f\xb9\x77\xb6\xa5\xd4\x7a\x98\x4d\xa6\x53\xd4\xa8\x4c\xc0\x12\x53\xa2\xe2\x25\x58\xb5\xb3\xef\xbc\xe7\xe9\xc4\xd9\x4d\xc3\x84\x78\xe4\x81\xf3\x33\x7a\x3c\x99\x92\x77\x95\xc8\x8f\x09\xa3\x32\xd4\x5e\x37\x38\x82\x94\x5f\xe0\xab\x37\xb8\xf4\x7f\x6c\xaf\x7b\x9b\x17\x48\xf9\xdf\x7e\xdd\x6e\xbf\x1d\x1e\x8c\xaf\xad\xed\xb0\xc4\x2f\x14\x6e\x64\xe6\x7a\xce\x6e\x98\x6d\x90\xcd\xfa\x19\x24\x67\xb6\x79\x16\x57\x00\x1c\xa3\x69\x90\x1b\xdb\xd2\x2c\x14\xcb\x3f\xe0\x02\xb9\xa7\x3e\x76\x01\xd7\x9f\xf3\x77\x9f\xd7\xf8\x05\xab\xa9\x5c\x22\x69\x17\x86\x85\xe4\x02\x56\x8d\xd5\xda\x1a\x7c\x5d\x62\x32\x2e\xb2\xdd\x4b\xe0\xcf\x93\x4c\x8e\x45\xde\xb9\xc4\xd1\x23\xa3\x85\xb2\x2d\x7d\x52\x7d\xb8\xa3\xa7\xca\x2c\x99\xef\x74\xd1\x2c\xd7\xfc\x9f\xe8\x83\xb7\xd1\x3d\x50\xe6\x7a\x8e\x14\xa2\x37\xf0\x1b\xfe\x04\x00\x00\xff\xff\x46\x1c\x07\xdb\x2b\x03\x00\x00")

func template_genny_field_go() ([]byte, error) {
	return bindata_read(
		_template_genny_field_go,
		"../template/genny/field.go",
	)
}

var _template_genny_list_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x8a\xdb\x30\x10\x3d\x47\x5f\x31\xec\x21\x48\xc1\xb5\xb7\xd7\xc0\x1e\x96\x85\x42\x21\xec\xa5\x65\x2f\xa5\x14\x45\x19\x67\x4d\xac\x91\x2b\x4b\x87\xd4\xf8\xdf\x8b\x6c\x2b\x16\xdb\x7a\x13\x4a\x0f\x01\x31\x33\x79\xef\xcd\x9b\xe7\x46\xaa\x93\x3c\x22\xfc\xf4\x68\xcf\x8c\x55\xba\x31\xd6\xc1\xdd\xb1\x72\xaf\x7e\x9f\x2b\xa3\x8b\x93\xfc\xe5\x8b\x72\xdf\xbe\x62\xdd\xa0\x2d\x86\xc1\x62\x2f\x5b\xbc\x63\xcc\x9d\x1b\x84\x5d\xd5\xba\xaf\xe1\xd1\x3a\xeb\x95\x83\x0e\x8a\x02\x8e\x48\x74\x66\xab\xcd\x93\xd1\xda\xd0\xb3\x39\x20\xeb\x19\x2b\x0a\x08\xcf\x67\xa9\x71\x9a\x60\xa5\x27\x05\xa8\x1b\x77\x8e\x38\x5c\xc0\xe6\x82\xd9\xb1\x95\x45\xe7\x2d\xc1\x3a\xd6\xba\x19\x73\x0b\xeb\xa0\x24\x9f\x2b\x5d\xdf\x07\xa2\x01\x95\x93\x39\xcc\xf2\x04\x3c\x3a\x5e\x41\x45\x4e\x00\xb7\xd8\xfa\xda\xc1\x26\xaa\xc9\x00\x01\xad\x35\x56\x8c\x8c\x43\xf7\x01\xd6\xb1\xdf\xf5\xb1\x9a\x70\x85\x3f\x3d\x40\x20\x49\x8a\x79\x60\x11\x51\xf5\xa2\x96\x4f\x95\x6d\x1d\xbf\x41\xc9\xb0\x3b\x4d\xc0\xf7\x62\x11\x70\x27\xff\x01\xaf\x22\x37\xe0\xe4\x61\x3a\x60\xe5\x2f\xb2\xf6\xf8\x99\x4a\x93\xbf\xec\x90\x04\x7c\x80\x8f\xcb\x9c\x5f\xb0\x46\xe5\x78\x49\x10\xda\xfc\xc2\x29\x60\x6f\x4c\x3d\x8b\xf9\xf6\x3d\x69\xa5\xfe\x6a\x79\x42\x9e\x74\x33\xb8\xcf\xe0\xaa\x28\xc1\x56\x6a\xf0\xbb\x85\xed\x9f\xfe\x47\x51\x41\x91\xd2\x90\x24\x70\x94\x15\x04\x44\x1f\x4a\xe2\xf3\x89\xd3\x58\x29\xdd\x0b\xb6\x0a\xbf\xd2\x58\xf8\x91\x81\xd2\x81\xcb\x4a\x3a\x22\x44\xf2\x11\x68\x5a\x45\x36\x0d\xd2\x61\xda\x38\x83\x77\x61\x2f\x77\x18\xa7\xdf\x09\x09\x1d\x96\xdd\xbd\x14\x12\x4b\xb7\xd7\x32\xfb\x97\xc0\x8e\x2c\xff\xc9\xae\xdb\x16\x7b\xac\x6b\x2e\xd2\x58\xbc\xcd\x66\x7a\xc4\x37\x8b\x43\x07\xd3\xa4\xb3\x1e\xa1\x5f\x8e\xe7\x93\xf1\x14\xbe\x89\x8a\x5c\x82\x7f\x35\x5e\xac\x67\xbf\x03\x00\x00\xff\xff\x53\xd0\xa4\xee\x16\x05\x00\x00")

func template_genny_list_go() ([]byte, error) {
	return bindata_read(
		_template_genny_list_go,
		"../template/genny/list.go",
	)
}

var _template_genny_node_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\xa0\xc3\x82\x0c\x84\xa8\xbd\x1a\x10\x8a\x6c\x1a\x07\x06\x36\xd9\x22\x76\xbb\x05\x8c\x20\x90\x65\x4a\x61\x2d\x91\x5a\x92\x0a\x92\x6a\xfd\xdf\x0b\x92\xfa\xb6\x9c\x74\x2f\x89\xcc\x79\xef\xcd\xe3\x0c\x39\x52\x19\x27\x87\x38\xa3\xf0\xbd\xa2\xf2\x0d\x21\x56\x94\x42\x6a\xc0\xc8\xf3\x33\xa6\x9f\xab\xdd\x65\x22\x8a\xf0\x10\xff\x5b\x85\xe9\x4e\x3d\xd3\xbc\xa4\x32\xb4\xd8\x70\x17\x2b\xea\x23\xef\x09\x3e\x44\xe6\x22\xf3\x11\x41\x28\xbc\x40\x00\x50\x54\x4a\x43\x12\xe7\x39\xfc\x0a\x9a\x15\x54\x41\x49\x25\x6c\xe2\x5d\x4e\x43\xa5\x65\x95\x68\x7c\x2f\xf6\xf4\x3e\x2e\x28\x41\x17\x21\x42\xfa\xad\xa4\xd0\x2e\x81\x83\x40\x8d\xbc\x0b\xe3\xe0\xf2\x5a\x14\x85\xe0\x26\x8c\x8e\x08\xa5\x15\x4f\x80\x16\xa5\x7e\x6b\x09\x98\xc0\x45\x47\xae\x91\x27\xa9\xae\x24\x87\x4f\xed\x5a\xdd\x0b\x2c\xe0\xd3\x44\xb2\x3e\x1e\x8d\xea\x4b\x2c\x3b\x03\x4f\xab\xfd\xeb\x46\x6c\x8c\xa7\x22\x2e\xb7\x8c\xeb\x47\xc6\x35\x44\xc3\x5f\xf5\xf1\x0c\xe5\x56\x8a\xaa\xfc\x49\x9e\x35\xde\x82\x94\x96\x8c\x67\x03\x96\x5b\x98\x12\xcd\x9f\x8d\x58\xed\x5f\x2d\xce\x61\x06\xe9\xfa\x85\xba\xd9\xdd\xef\x7f\xde\xdd\xfd\xf1\xd4\xf2\x57\x6a\xed\xaa\xbc\x13\x22\x87\x08\x6c\x55\xd6\x54\xf7\x31\x9e\x68\xec\xb7\x70\x3f\x70\x88\x8d\xf8\x2c\x44\x8e\xfd\x96\xee\x13\xd2\x74\xc4\x70\x1b\xf0\x92\xd1\x7c\xaf\x30\x37\xcf\x01\xa4\xcd\x3f\x5b\x4f\x67\xcb\x2c\x56\x05\x30\xae\x89\xcb\x5f\x23\xe4\x59\xfd\x07\xfa\xbd\xa2\x4a\xaf\xa9\xd6\x8c\x67\xef\x8b\x39\x15\x82\x90\x47\x79\x55\x2c\xb5\x5d\x12\x07\x58\x34\xbb\x71\x15\x32\xc8\xad\xc5\x3f\x22\x8f\xa5\x06\x50\x23\xcf\x6b\xbd\xae\xa9\xee\x5a\x87\x8d\x5e\x00\x9d\x1a\x41\xde\x11\x79\x61\xb8\x5c\xfd\x7d\x77\xb3\x30\xa2\x2c\x01\x7b\x54\x05\xcf\xdf\x40\x69\x21\xe9\x6f\x08\x9d\x68\xd9\x33\xe9\xb4\x6c\x62\x63\x31\x93\xa5\x31\xd6\x42\x6f\xa9\xee\x0e\x0b\x6e\x40\x43\x9d\x41\xd0\xea\x64\xb2\x24\x83\x4c\xfd\xb1\xd9\x9a\xf8\x23\x44\x2e\xd3\x10\xd2\x1d\x90\xad\x2d\x9a\xc5\xdc\x57\x45\x53\xe8\xa6\xd5\x16\x30\x6a\xf3\x29\xdf\x24\x6e\xae\x94\x96\x15\x45\xe8\xe8\x3a\x3e\xbb\x6d\x66\xba\x1a\x80\x6a\x3a\x4d\x4c\xb1\x67\x5c\x33\x63\x47\xa1\xde\x4c\xaf\x30\x6b\xa6\x0b\x93\x6e\x04\xcc\x76\xf0\x10\xc0\xcb\xe8\x5c\x79\xa7\x37\x74\x7b\x30\xc9\x5f\x26\xb9\x2d\xfd\x7c\xee\xa6\x45\xc3\x3a\xcc\x18\xe9\xdb\xf6\x7f\x8c\x58\xe4\x89\x9b\x51\xf4\x03\x47\x16\xf3\x81\xad\xd1\x51\xeb\xfb\x82\x25\x55\x55\xae\x9d\xc7\x7e\x68\x5a\x17\x63\x4a\x5f\x72\xcc\xc5\xbe\x9f\xd3\x04\x92\x6e\x8a\x9a\x11\x3c\x19\xac\x46\x94\xa5\x60\x28\xc3\xd5\x28\x02\xce\x6c\x41\xdc\x8e\xbf\x88\x0c\xbb\x87\xaf\xb7\x4f\xdf\xae\x1e\xee\x03\x30\xb9\x30\x81\x36\x7c\x25\x33\x65\xf1\x23\x8f\x4b\xec\x0f\x54\xb9\xd0\x90\x8a\x8a\xef\x3b\x77\x3e\x41\x9e\x77\x34\x57\x18\x68\xae\x28\xb0\x14\x72\xca\xf1\xc4\xce\xa5\xdb\x48\x14\xc1\x2f\xf0\xe3\xc7\x2c\xa2\x6f\xbf\x83\x19\x27\x73\x2a\x10\x41\xdf\xac\x19\x4c\xff\x52\x89\x66\x3a\xf9\x1e\xc1\xbd\x52\xe6\x58\x36\x62\xa7\x54\x53\x9a\x89\x46\x7b\x55\xa7\x8d\x5b\xd3\x58\x26\xcf\x2b\x9e\x0a\x5c\x0a\xe5\xae\x6c\xda\x14\xf6\x81\x26\x4b\x1e\x40\x22\xf8\x7e\xd9\x2c\x5d\xdb\x67\x62\xc7\xb4\xcd\x30\x6c\xfc\xe5\x58\xcc\x08\xb5\x6c\x82\xce\x1e\x1d\x0b\x27\x80\x19\x4f\x85\x4b\x62\x56\x5c\x8a\xe1\x5e\x46\x99\x1c\xe9\x1d\x51\xf5\x85\xc6\xe9\x95\xc6\xff\x4c\xde\x2d\xe7\x15\x3b\xc6\x3b\xb2\xd7\xa2\xe2\xfa\x6b\x6a\xdf\x44\x98\x18\xe9\xc1\x85\x31\x47\x66\x6e\x54\x9c\x13\xfb\x2b\xce\x2b\x6a\x37\xc2\x1a\x93\x66\xf3\xdd\xea\x40\xf9\xd4\xed\x80\x7b\x3e\x81\xb5\x79\xa5\x31\xdb\xbf\xba\x04\x73\x17\xf3\x6c\x8a\x01\xfb\x7c\x8a\x07\x21\x34\x76\xff\xec\x81\xee\x05\xb5\xb0\x31\xab\xfb\x39\x56\xae\x0e\xa3\xaf\xbb\x6f\x4c\x3f\xdf\x48\x39\xfc\xc8\x6b\x43\xc8\x33\x01\x2a\xa5\x90\xa7\xc3\x95\xf1\x2c\xa7\xce\x48\x47\x08\x80\x3a\x38\x39\x91\xef\x2d\x4d\x22\x75\xfb\x7b\x61\x77\x1f\xc0\x8d\x94\x0b\xa0\xe6\x23\xf0\xbf\x00\x00\x00\xff\xff\x8d\x5f\x2e\x16\x29\x0b\x00\x00")

func template_genny_node_go() ([]byte, error) {
	return bindata_read(
		_template_genny_node_go,
		"../template/genny/node.go",
	)
}

var _template_genny_node_test_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcf\x6e\xf2\x30\x10\xc4\xcf\xde\xa7\x58\xe5\x80\xe2\xef\x8b\xe2\x9e\xab\xd2\x23\x12\x17\x84\x04\xf7\xca\x4e\x36\xc4\x22\xb1\x5d\xff\x39\x00\xe2\xdd\x2b\x9b\x50\xa4\xde\x3c\x1e\xff\x66\xd6\xeb\x64\x77\x96\x27\xc2\xef\x44\xfe\x02\xa0\x67\x67\x7d\xc4\x1a\x58\x15\x29\x44\x6d\x4e\x15\x00\x53\x58\x9d\x74\x1c\x93\x6a\x3b\x3b\x8b\xb3\xbc\x26\x31\xa8\x30\xd2\xe4\xc8\x8b\x42\x0a\x25\x03\x55\xc0\x01\x86\x64\x3a\x3c\x52\x88\x5f\x81\xa4\xef\xc6\xad\x19\x6c\x1d\xf1\xdf\x12\xd7\x1e\x39\xde\x00\x98\xc4\xf7\x35\xd2\xec\xe2\x65\x67\x7b\xda\xc9\x99\x6a\x0e\x4c\x88\xa7\xda\x68\x9a\xfa\xb0\x4b\xf3\xd6\xe8\x98\xad\xce\x9a\x3e\x33\x39\xbf\x76\x36\xa0\x36\xb1\x41\x6d\x06\x8b\xaa\xcd\x25\x1c\x95\xb5\x13\xde\x80\x31\x4f\x31\x79\x53\xcc\x76\x6f\x03\x7e\xac\x31\x13\xab\x15\xd6\xcf\xbb\xff\xe5\x70\xd0\x57\xe2\xf8\x99\x5d\x60\x4c\x88\x05\x8c\x3e\x11\xb0\x3b\x30\x4f\xdd\xc6\xfc\xb6\x06\x54\x6d\x9e\x6f\x2f\xe3\xf8\xa7\xfa\x56\xf0\xdc\x1c\xd2\x14\x71\x8d\xd2\x39\x32\x7d\xfd\xd0\x0d\x06\xbe\x3c\xc8\x54\x78\xf9\x45\x3e\xb2\x78\x69\x94\xed\xe1\xb5\xb6\xb7\x06\xcb\x04\x0d\xe6\xdf\x73\x80\x3b\xfc\x04\x00\x00\xff\xff\x93\x01\x9e\x3b\xb0\x01\x00\x00")

func template_genny_node_test_go() ([]byte, error) {
	return bindata_read(
		_template_genny_node_test_go,
		"../template/genny/node_test.go",
	)
}

var _template_genny_root_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\x0e\x06\xf9\xd5\x90\x9a\x1f\x18\x45\x50\x1f\xea\x02\x69\x03\x04\x0e\x90\x26\xa7\xa2\x07\xc9\x5e\x39\x44\x64\x52\x25\xa9\x26\x8a\xe1\x77\x2f\x48\xea\x87\xb1\x9d\x34\xe8\xa5\x37\x71\x76\x76\xb8\x3b\xbb\xa6\xab\x6c\x71\x9f\xad\x10\x7e\xd6\xa8\x1a\x42\xf8\xba\x92\xca\x00\x25\x51\xcc\x65\x4c\xa2\x58\x1b\xb5\x90\xe2\x57\x4c\x48\x54\x94\x99\xc9\xeb\xa2\x40\xa5\x21\x5e\x71\x73\x57\xe7\xc9\x42\xae\xd3\x95\x94\xab\x12\xd3\x20\x9c\xae\x5c\x6e\xc0\xb9\xcf\x9e\xea\xb4\xc8\xf5\x1d\x96\x15\xaa\xd4\xdd\x96\xe6\x99\xc6\x98\x30\x42\x4c\x53\x21\xcc\xa4\x2c\x61\x0a\x16\x4c\xec\x77\x8b\x36\x06\x7b\xb4\x31\xe8\xd1\x0b\x61\x3e\x74\xa8\xfd\xee\xd1\xa3\x49\x00\x1f\x4d\x7a\xfc\xe4\x38\xc0\x4f\x8e\x7b\x7c\x72\x1a\xe0\x93\x53\x8f\xdf\xf2\x40\xde\x1d\x06\x7c\xb8\xc0\x9f\x86\xc8\x70\x85\x3f\x0d\x91\xe1\x12\x7f\xf2\x91\xf3\x52\x66\x41\x52\x7b\x0c\x62\x43\x5a\x7b\x6c\x8d\xfa\x2c\xd7\x6b\x29\xe6\x72\xd9\x1b\x33\x20\x7b\x94\x4b\xae\xcd\x21\x5a\x51\x8b\x05\xe0\xba\x32\xcd\x80\x52\x06\xff\xef\x10\x61\x43\x22\x85\xa6\x56\x02\x46\x3b\xa1\xcd\x96\x6c\x0f\xeb\xd8\x3b\xad\xd6\x4e\x15\x81\xd4\xf3\x48\xa0\x74\x55\xa1\xa0\x0a\xb8\x4c\xae\x31\x5b\xa2\x1a\xc3\x22\xab\x80\x0b\xc3\xe0\x5a\x4a\x73\x63\x9b\x73\x3a\xba\x2e\x0d\x9c\x4d\x7b\x74\x33\x48\x9e\xf9\x6e\xbd\x94\x13\x60\xdb\x2e\x25\xa8\x3f\x99\x67\x6b\xeb\x60\xdc\x49\xc4\x24\x72\x89\xdf\xd0\x58\xc8\x86\xe9\xe1\x2c\xd6\xcb\x9d\xa3\x59\xdc\x5d\x88\x25\x3e\x52\xd6\xb7\xe7\x63\x24\x4a\xd3\x16\x78\x6b\x91\xa1\x0b\xb3\x66\x56\x17\x34\xaf\x0b\xf8\xfe\x23\x6f\x0c\xfe\x9d\x01\xbd\xca\xbf\xb1\xa0\x6b\xc8\x48\x2b\x47\xf3\x76\xbf\x66\x99\xde\xe9\x67\xe1\xd4\x6d\x3f\xa3\x67\x1b\xd6\x06\x92\x60\x95\xfd\x1e\x06\xbb\x13\x72\xba\x55\x9f\xe3\x83\xdb\xe8\x7c\x6c\x97\x87\x06\x6f\x53\xf2\x05\xcd\xed\x55\x51\x68\x34\x37\x34\x4f\xae\xe9\x7b\xc6\x98\x2d\x5c\xca\x97\xfd\xf4\x37\x6c\x3d\xeb\x0f\x06\x3a\xca\x61\x53\xa4\x1c\x2c\xa1\xc2\x96\xdb\xe5\x31\x98\xe3\xa3\xfd\xd1\x84\xa6\x68\x93\x29\x57\x93\xa5\x26\x97\x28\x28\x23\x24\xe2\x45\x7f\xb6\xb3\x65\xef\x4e\xe1\x23\x78\xea\x86\x44\xdd\x5d\x96\x42\xa2\x2d\x21\x91\xc0\x07\xeb\x77\xaf\x33\xf3\xfe\x3c\x1a\xfb\x41\x5d\xa2\x95\xdd\xeb\x7f\xbf\x5b\x98\xee\xbf\x18\x2d\xe9\xd5\xf9\xf4\x8c\xdd\xe9\xb4\xa5\xbd\x3e\xa3\x96\x14\x4c\xea\x0d\x6e\x5e\x08\x8d\xca\x58\x7f\x2a\xa9\xc7\xa0\xf9\x13\xfa\x57\x64\x43\x22\xe7\x42\x30\xc3\x03\x5c\xf6\xa2\xf0\xd7\x4c\xb7\x93\xca\xed\xff\xd5\x86\x90\xd0\xf1\xe7\x43\x09\xc6\xd6\xc9\x7d\x32\x92\x53\x0d\xda\x28\x2e\x56\x0c\x28\x17\x66\x0c\xa8\x94\x54\xcc\x69\x09\x77\xb2\x73\x68\xff\x78\x13\x9f\xc1\xdc\xdc\x6d\xe8\xbf\x29\x08\x5e\xc2\x68\x04\x1a\xa6\x53\x88\xcf\x39\x96\xcb\x79\xbd\x8e\xdd\xf4\x2d\xc3\x11\xec\xec\xfb\xca\x9c\x28\xd9\x92\xdf\x01\x00\x00\xff\xff\x49\x9b\xf4\x56\xed\x07\x00\x00")

func template_genny_root_go() ([]byte, error) {
	return bindata_read(
		_template_genny_root_go,
		"../template/genny/root.go",
	)
}

var _template_genny_union_alias_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcb\x6a\xeb\x30\x10\x86\xd7\x9e\xa7\x18\xb4\x38\xd8\xe1\x60\xed\x03\x5e\x94\x96\x42\xa1\x09\x85\x92\x75\x91\xed\x89\x2d\xa2\x8b\xab\x4b\x69\x1a\xf2\xee\x45\x0e\x95\xbd\xc8\x6e\xe6\xff\x3f\x7d\x8c\x26\xd1\x9d\xc4\x40\xf8\x19\xc9\x9d\x01\xf8\x06\x06\x32\xe6\x8c\x3a\xfa\x80\x2d\x61\x27\x94\xa2\x1e\x27\x72\x78\x30\xd2\x9a\xbd\xd0\x04\x1b\x0e\x20\xf5\x64\x5d\xc0\x12\x0a\x36\xc8\x30\xc6\xb6\xee\xac\xe6\x27\xf1\x13\xf9\xb1\xf5\x23\xa9\x89\x1c\x9f\xad\xbc\x15\x9e\x18\x54\x00\x5f\xc2\xe1\xd3\x61\xb7\x7b\xfb\xc8\xae\x07\x25\x85\x4f\x03\xb6\xd6\x2a\x6c\x30\xc1\xf5\x3b\x85\xb9\x28\x59\x06\xd9\x7f\x64\x19\x66\x15\xc0\x31\x9a\x0e\x4b\x63\x7b\x5a\x2e\xab\x30\x23\xe5\x6a\xc6\x0b\x14\x9c\x3b\xf2\x51\x05\xdc\x36\x4b\x71\x79\xb4\x5a\x5b\xb3\xb7\x3d\x6d\x31\xa9\xea\x25\xb8\x42\x71\xef\x45\x8e\x57\x28\x36\xf8\x6f\xd9\x56\x48\x5a\x5f\xa5\x0f\xd8\xdc\xec\x7f\xfb\x1d\x47\x3d\x1f\xda\xac\x3f\x99\xa9\x67\x0a\xdd\xf8\x62\x7a\xfa\x2e\xab\x14\x86\xe8\x0c\xde\x3a\xb8\xc2\x6f\x00\x00\x00\xff\xff\xbc\x73\x10\xa1\xc3\x01\x00\x00")

func template_genny_union_alias_go() ([]byte, error) {
	return bindata_read(
		_template_genny_union_alias_go,
		"../template/genny/union-alias.go",
	)
}

var _template_genny_union_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x3d\x6e\xc3\x30\x0c\x85\xe7\xf0\x14\x0f\x1e\x02\xdb\x43\x84\xae\x01\x32\x75\x6e\xb6\x1e\x40\x56\x68\x47\x88\xf5\x53\x89\x1a\x5c\xc3\x77\x2f\xec\xa0\x4e\xd1\x85\x03\xf9\xbe\x8f\x2f\x6a\xf3\xd0\x03\xe3\xab\x70\x9a\x88\x54\x4b\x00\x06\xf6\x7e\x82\x2b\x59\xd0\x31\x8c\x1e\x47\xbe\xe1\x0d\x62\x1d\x67\x44\x4e\xb8\x86\x1b\x5f\xb5\x63\x6a\x15\x91\x75\x31\x24\x41\x4d\x87\x6a\xb0\x72\x2f\xdd\xc9\x04\xa7\x1e\xfa\xbb\xa8\xbe\xcb\x77\x1e\x23\x27\xb5\xf9\x55\xa7\x33\x57\xd4\x10\xc9\x14\x19\x9f\xde\x06\xbf\x6a\x90\x25\x15\x23\x98\xe9\xd0\xae\x91\xd3\x7b\x70\x2e\xf8\xf5\x0b\x2d\x44\x7d\xf1\x06\xec\xa2\x4c\x3b\x51\x37\x68\x5f\xf8\x4c\x87\xc4\xb9\x8c\x82\xf3\x05\xc7\x7d\x3f\xbf\x34\x67\x1c\xff\x89\xe7\x65\xf9\xa5\x4e\x9b\xe4\x82\x6a\x27\xab\xf5\x24\x25\x79\x3c\x13\x7b\x8b\xda\x87\xdb\x9f\xe2\x0d\x3e\xd8\x75\x9c\x6a\x0b\xeb\xa5\x59\x07\xa7\x5e\x1b\x9e\x97\x67\xa9\xcd\xe1\xed\x48\x0b\xfd\x04\x00\x00\xff\xff\x03\x6e\x01\x72\x6a\x01\x00\x00")

func template_genny_union_go() ([]byte, error) {
	return bindata_read(
		_template_genny_union_go,
		"../template/genny/union.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"../template/genny/dummy.go": template_genny_dummy_go,
	"../template/genny/field.go": template_genny_field_go,
	"../template/genny/list.go": template_genny_list_go,
	"../template/genny/node.go": template_genny_node_go,
	"../template/genny/node_test.go": template_genny_node_test_go,
	"../template/genny/root.go": template_genny_root_go,
	"../template/genny/union-alias.go": template_genny_union_alias_go,
	"../template/genny/union.go": template_genny_union_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"..": &_bintree_t{nil, map[string]*_bintree_t{
		"template": &_bintree_t{nil, map[string]*_bintree_t{
			"genny": &_bintree_t{nil, map[string]*_bintree_t{
				"dummy.go": &_bintree_t{template_genny_dummy_go, map[string]*_bintree_t{
				}},
				"field.go": &_bintree_t{template_genny_field_go, map[string]*_bintree_t{
				}},
				"list.go": &_bintree_t{template_genny_list_go, map[string]*_bintree_t{
				}},
				"node.go": &_bintree_t{template_genny_node_go, map[string]*_bintree_t{
				}},
				"node_test.go": &_bintree_t{template_genny_node_test_go, map[string]*_bintree_t{
				}},
				"root.go": &_bintree_t{template_genny_root_go, map[string]*_bintree_t{
				}},
				"union-alias.go": &_bintree_t{template_genny_union_alias_go, map[string]*_bintree_t{
				}},
				"union.go": &_bintree_t{template_genny_union_go, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
