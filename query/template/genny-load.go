package query

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _template_genny_dummy_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x3d\x6e\xc3\x30\x0c\x85\x67\xf3\x14\x44\x86\x20\xc9\x10\xed\xdd\x8a\xee\x1e\x8a\x5e\x40\x72\x68\x5b\x88\x28\xa9\x12\x89\xc2\x35\x7c\xf7\xc2\xfd\x81\x3d\x15\xd9\x88\xc7\x8f\xdf\x63\xb6\xdd\xdd\x0e\x84\xef\x4a\x65\x02\x30\x06\x65\xf4\x15\x7d\xc5\x9b\x32\x4f\x38\x50\x8c\x13\x0a\x71\x0e\x56\x08\x7b\x1f\x08\x3c\xe7\x54\x04\x4f\xd0\x1c\x06\x2f\xa3\xba\x6b\x97\xd8\xdc\xed\xa7\x9a\xde\xd5\x91\x42\xa6\x62\xbe\x85\xc6\xd9\x4a\x07\x68\x1c\x3e\x48\x9e\x01\x64\xca\x84\xaf\x54\x35\xc8\xdb\x3a\xb6\xe9\x46\xad\x65\xfa\xdb\xa4\xf4\x93\x57\x29\xda\x09\xce\xd0\x5c\xdc\xf5\x25\x31\xa7\xb8\xa2\xb0\xfc\x82\xcf\xc1\xdb\xba\x1e\xfe\x47\xf6\x1a\x3b\x6c\xe9\x63\xeb\x3b\x9d\xf1\xb2\x6b\x9f\xa1\x29\x24\x5a\x22\x1e\xb7\x74\xde\x24\x4f\x78\x5c\x3f\xdf\x69\xe7\x65\x81\x05\xbe\x02\x00\x00\xff\xff\x9f\x7a\x36\xb0\x58\x01\x00\x00")

func template_genny_dummy_go() ([]byte, error) {
	return bindata_read(
		_template_genny_dummy_go,
		"../template/genny/dummy.go",
	)
}

var _template_genny_field_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xcb\x6e\xdb\x30\x10\x3c\x7b\xbf\x62\xc1\x13\x69\xb8\xe2\xbd\x80\x0a\x18\xe8\x03\x05\x6a\x1d\x5a\xf7\xd0\x93\xa1\xc7\xda\x26\x2c\x91\x2a\x45\x26\x56\x82\xfc\x7b\x40\x4a\x96\x9c\xc4\xb0\x0e\x12\x67\x67\x76\x76\x96\x6a\xf3\xf2\x94\x1f\x08\xff\x7b\xb2\x3d\x80\x6a\x5a\x63\x1d\x72\x58\xb0\x83\x72\x47\x5f\x24\xa5\x69\x64\x79\x24\x3a\xf5\x85\x72\x9d\x3c\x90\xd6\x7d\x78\x93\x55\x25\x7b\x2b\x3b\xe5\x4f\x5e\xee\x8b\xee\x48\x75\x4b\x56\x46\x4b\x59\xe4\x1d\x31\x10\x00\x72\x09\xb1\x19\x1b\xdf\x39\x2c\x08\xcb\xbc\xae\xa9\xc2\x96\x2c\x7e\x57\x54\x57\xb0\x94\x00\xae\x6f\x69\x80\x59\xde\x10\x8e\x83\x92\x6d\xdf\xd2\x35\x19\xf0\x3b\xf2\x21\xb7\x21\x77\x66\x2a\x0a\xad\xbb\xc9\x64\x3c\xf9\x06\x95\x76\x98\x62\x48\x94\xac\x9d\x51\x99\xf9\x66\x2d\x0f\x27\xce\x2e\x1a\x26\xc4\x2d\x0f\x9c\x9e\xc1\xe3\xce\x94\xb8\xab\x44\xbe\x0f\x18\x95\xa6\xea\xbc\xc2\x01\x84\xfc\x02\x3f\x7d\xc1\xb9\xff\x67\x75\xde\x9a\xb8\x40\xc8\xff\xf5\xef\x66\xf3\x6f\x77\x63\x7c\x61\x4c\x8d\x29\xfe\x21\x77\x21\x23\xd7\x71\x76\xc1\x6c\x85\x6c\xd2\x4f\x20\x38\xb3\xd5\xbd\xb8\x02\x60\xef\x75\x89\x5c\x9b\x8a\x26\xa1\x98\xff\x01\x17\xc8\x2d\x75\xbe\x76\xb8\xfc\x1d\xbf\xdb\xb8\xc6\x33\x2c\xc6\x72\x8a\x19\x3d\xce\x14\x17\xb0\x28\x4d\xd3\x18\x8d\x9f\x53\x0c\xb6\x49\x34\x5b\x3b\x7e\x3f\xc7\xe8\x97\xc4\x8d\x53\x1c\x3c\x22\x9a\x29\x53\xd1\x2f\xd5\xb9\x2b\x7a\xac\x4c\x92\xe9\x46\x67\xcd\x7c\xc9\x1f\x44\x3f\xac\xf1\xed\x0d\x65\xac\xc7\x48\xce\x5b\x0d\x2f\xf0\x1a\x00\x00\xff\xff\xcd\x2a\xfa\x2f\x29\x03\x00\x00")

func template_genny_field_go() ([]byte, error) {
	return bindata_read(
		_template_genny_field_go,
		"../template/genny/field.go",
	)
}

var _template_genny_list_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x41\x8b\xdb\x3c\x10\x3d\x47\xbf\x62\xd8\x43\x90\x82\x3f\x7b\xbf\x6b\x60\x0f\xcb\x42\xa1\x10\x72\x69\xd9\x4b\x29\x45\x51\xc6\x59\x13\x6b\xe4\xca\x12\x25\x35\xfe\xef\x45\xb6\x15\x8b\x6d\xbd\x59\x4a\x0f\x01\x31\x33\x79\xef\xcd\x9b\xe7\x46\xaa\xb3\x3c\x21\x7c\xf7\x68\x2f\x8c\x55\xba\x31\xd6\xc1\xdd\xa9\x72\x2f\xfe\x90\x2b\xa3\x8b\xb3\xfc\xe9\x8b\xf2\xd0\xbe\x60\xdd\xa0\x2d\x86\xc1\xe2\x20\x5b\xbc\x63\xcc\x5d\x1a\x84\x5d\xd5\xba\xcf\xe1\xd1\x3a\xeb\x95\x83\x0e\x8a\x02\x4e\x48\x74\x61\xab\xcd\x93\xd1\xda\xd0\xde\x1c\x91\xf5\x8c\x15\x05\x84\xe7\x5e\x6a\x9c\x26\x58\xe9\x49\xc1\x1e\x7f\x44\x14\x2e\x60\x73\x45\xec\xd8\xca\xa2\xf3\x96\x60\x1d\x6b\xdd\x8c\xb8\x85\x75\xd0\x91\xcf\x95\xae\xef\x03\xcd\x80\xc9\xc9\x1c\x67\x71\x02\x1e\x1d\xaf\xa0\x22\x27\x80\x5b\x6c\x7d\xed\x60\x13\xb5\x64\x80\x80\xd6\x1a\x2b\x46\xc6\xa1\xfb\x00\xeb\xd8\xef\xfa\x58\x4d\xb8\xc2\x9f\x1e\x20\x90\x24\xc5\x3c\xb0\x88\xa8\x7a\x51\xcb\x87\xca\xb6\x8e\xbf\x43\xc9\xb0\x3b\x4d\xc0\xf7\x62\x11\x70\x27\xff\x02\xaf\x22\x37\xe0\xe4\x61\x3a\x60\xe5\xcf\xb2\xf6\xf8\x91\x4a\x93\x3f\xef\x90\x04\xfc\x07\xff\x2f\x73\x7e\xc2\x1a\x95\xe3\x25\x41\x68\xf3\x2b\xa7\x80\x83\x31\xf5\x2c\xe6\xcb\xd7\xa4\x95\xfa\xab\xe5\x19\x79\xd2\xcd\xe0\x3e\x83\x9b\xa2\x04\x5b\xa9\xc1\xef\x16\xb6\xbf\xfb\x1f\x45\x05\x45\x4a\x43\x92\xbf\x51\x56\x10\x10\x7d\x28\x89\xcf\x27\x4e\x63\xa5\x74\x2f\xd8\x2a\xfc\x4a\x63\xe1\x5b\x06\x4a\x07\x2e\x2b\xe9\x84\x10\xc9\x47\xa0\x69\x15\xd9\x34\x48\xc7\x69\xe3\x0c\xde\x84\xbd\xde\x61\x9c\x7e\x23\x24\x74\x5c\x76\xf7\x5a\x48\x2c\xdd\xde\xca\xec\x1f\x02\x3b\xb2\xfc\x23\xbb\xde\xb7\xd8\x63\x5d\x73\x91\xc6\xe2\x75\x36\xd3\x23\xbe\x5a\x1c\x3a\x98\x26\x9d\xf5\x08\xfd\x72\x3c\x9f\x8c\xa7\xf0\x4d\x54\xe4\x12\xfc\x9b\xf1\x62\x3d\xfb\x15\x00\x00\xff\xff\x15\x40\x60\x64\x14\x05\x00\x00")

func template_genny_list_go() ([]byte, error) {
	return bindata_read(
		_template_genny_list_go,
		"../template/genny/list.go",
	)
}

var _template_genny_node_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\xa0\xc3\x82\x0c\x84\xa8\xbd\x06\x10\x8a\x6c\x1a\x07\x06\x36\xde\x22\x76\xbb\x05\x8c\x20\x90\x65\x4a\x61\x2d\x91\x5a\x92\x4a\x93\x6a\xfd\xdf\x0b\x92\xfa\xb6\x9c\xb4\x97\x44\xe6\xbc\xf7\xe6\x71\x86\x1c\xa9\x8c\x93\x43\x9c\x51\xf8\x5e\x51\xf9\x86\x10\x2b\x4a\x21\x35\x60\xe4\xf9\x19\xd3\xcf\xd5\xee\x32\x11\x45\x78\x88\xff\xa9\xc2\x74\xa7\x9e\x69\x5e\x52\x19\x5a\x6c\xb8\x8b\x15\xf5\x91\xf7\x04\x1f\x22\x73\x91\xf9\x88\x20\x14\x5e\x20\x00\x28\x2a\xa5\x21\x89\xf3\x1c\x7e\x06\xcd\x0a\xaa\xa0\xa4\x12\x36\xf1\x2e\xa7\xa1\xd2\xb2\x4a\x34\x5e\x89\x3d\x5d\xc5\x05\x25\xe8\x22\x44\x48\xbf\x95\x14\xda\x25\x70\x10\xa8\x91\x77\x61\x1c\x5c\xde\x88\xa2\x10\xdc\x84\xd1\x11\xa1\xb4\xe2\x09\xac\xe8\xdf\x2d\x1c\x13\xb8\xe8\xa8\x35\xf2\x24\xd5\x95\xe4\xf0\xa9\x5d\xab\x7b\xfa\x15\x7c\x9a\x08\xd6\xc7\xa3\xd1\x7c\x89\x65\x97\xfe\x69\xb9\x7f\xdd\x88\x8d\x71\x54\xc4\xe5\x96\x71\xfd\xc8\xb8\x86\x68\xf8\xab\x3e\x9e\xa1\xdc\x49\x51\x95\xff\x93\x67\x8d\xb7\x20\xa5\x25\xe3\xd9\x80\xe5\x16\xa6\x44\xf3\x67\x23\x96\xfb\x57\x8b\x73\x98\x41\xba\x7e\xa1\x6e\x76\xf7\xeb\xef\xf7\xf7\xbf\x3d\xb5\xfc\xa5\x5a\xbb\x1a\xef\x84\xc8\x21\x02\x5b\x95\x35\xd5\x7d\x8c\x27\x1a\xfb\x2d\xdc\x0f\x1c\x62\x23\x3e\x0b\x91\x63\xbf\xa5\xfb\x84\x34\xfd\x30\xdc\x06\xbc\x60\x34\xdf\x2b\xcc\xcd\x73\x00\x69\xf3\xcf\xd6\xd3\xd9\x32\x8b\x55\x01\x8c\x6b\xe2\xf2\xd7\x08\x79\x56\xff\x81\x7e\xaf\xa8\xd2\x6b\xaa\x35\xe3\xd9\xfb\x62\x4e\x85\x20\xe4\x51\x5e\x15\x0b\x6d\x97\xc4\x01\xae\x9a\xdd\xb8\x0a\x19\xe4\xd6\xe2\x1f\x91\xc7\x52\x03\xa8\x91\xe7\xb5\x5e\xd7\x54\x77\xad\xc3\x46\x2f\x80\x4e\x8d\x20\xef\x88\xbc\x30\x5c\x2c\xff\xbc\xbf\xbd\x32\xa2\x2c\x01\x7b\x50\x05\xcf\xdf\x40\x69\x21\xe9\x2f\x08\x9d\x68\xd9\x33\xe9\xb4\x6c\x62\x63\x31\x93\xa5\x31\xd6\x42\xef\xa8\xee\x0e\x0b\x6e\x40\x43\x9d\x41\xd0\xea\x64\xb2\x24\x83\x4c\xfd\xb1\xd9\x9a\xf8\x23\x44\x2e\xd3\x10\xd2\x1d\x90\xad\x2d\x9a\xc5\xac\xaa\xa2\x29\x74\xd3\x6a\x0b\x18\xb5\xf9\x94\x6f\x12\x37\x57\x4a\xcb\x8a\x22\x74\x6c\x6e\xe0\xdc\xb6\x99\xe9\x6a\x00\xaa\xe9\x34\x31\xc5\x9e\x71\xcd\x8c\x1d\x85\x7a\x33\xbd\xc2\xac\x99\x2e\x4c\xfa\x01\x30\xd7\xc1\x43\x00\x2f\xa3\x73\xe5\x9d\xde\xd0\xed\xc1\x24\x7f\x99\xe4\xb6\xf4\xf3\xb9\x9b\x16\x0d\xeb\x30\x63\xa4\x6f\xdb\x7f\x31\x62\x91\x27\x6e\x46\xd1\x0f\x1c\x59\xcc\x07\xb6\x46\x47\xad\xef\x0b\x96\x54\x55\xb9\x76\x1e\xfb\xa1\x69\x5d\x8c\x29\x7d\xc9\x31\x17\xfb\x7e\x4a\x13\x48\xba\x29\x6a\x46\xf0\x64\xb0\x1a\x51\x96\x82\xa1\x0c\x57\xa3\x08\x38\xb3\x05\x71\x3b\xfe\x22\x32\xec\x1e\xbe\xde\x3d\x7d\xbb\x7e\x58\x05\x60\x72\x61\x02\x6d\xf8\x5a\x66\xca\xe2\x47\x1e\x17\xd8\x1f\xa8\x72\xa1\x21\x15\x15\xdf\x77\xee\x7c\x82\x3c\xef\x68\xae\x30\xd0\x5c\x51\x60\x29\xe4\x94\xe3\x89\x9d\x4b\xb7\x91\x28\x82\x9f\xe0\xc7\x8f\x59\x44\xdf\x7e\x07\x33\x4e\xe6\x54\x20\x82\xbe\x59\x33\x98\xfe\xa5\x12\xcd\x74\xf2\x3d\x82\x7b\xa5\xcc\xb1\x6c\xc4\x4e\xa9\xa6\x34\x13\x8d\xf6\xaa\x4e\x1b\xb7\xa6\xb1\x4c\x9e\x97\x3c\x15\xb8\x14\xca\x5d\xd9\xb4\x29\xec\x03\x4d\x16\x3c\x80\x44\xf0\xfd\xa2\x59\xba\xb1\xcf\xc4\x8e\x69\x9b\x61\xd8\xf8\xcb\xb1\x98\x11\x6a\xd9\x04\x9d\x3d\x3a\x16\x4e\x00\x33\x9e\x0a\x97\xc4\xac\xb8\x14\xc3\xbd\x8c\x32\x39\xd2\x3b\xa2\xea\x0b\x8d\xd3\x6b\x8d\xff\x9a\xbc\x5b\xce\x2b\x76\x8c\x77\x64\x6f\x44\xc5\xf5\xd7\xd4\xbe\x89\x30\x31\xd2\x83\x0b\x63\x8e\xcc\xdc\xa8\x38\x27\xf6\x47\x9c\x57\xd4\x6e\x84\x35\x26\xcd\xe6\xbb\xd5\x81\xf2\xa9\xdb\x01\xf7\x7c\x02\x6b\xf3\x5a\x63\xb6\x7f\x75\x09\xe6\x2e\xe6\xd9\x14\x03\xf6\xf9\x14\x0f\x42\x68\xec\xfe\xd9\x03\xdd\x0b\x6a\x61\x63\x56\xf7\x73\xac\x5c\x1d\x46\xdf\x76\xdf\x98\x7e\xbe\x95\x72\xf8\x89\xd7\x86\x90\x67\x02\x54\x4a\x21\x4f\x87\x2b\xe3\x59\x4e\x9d\x91\x8e\x10\x00\x75\x70\x72\x22\xdf\x5b\x9a\x44\xea\xf6\xf7\x95\xdd\x7d\x00\xb7\x52\x5e\x01\x35\x1f\x81\xff\x06\x00\x00\xff\xff\x36\x23\x61\x53\x27\x0b\x00\x00")

func template_genny_node_go() ([]byte, error) {
	return bindata_read(
		_template_genny_node_go,
		"../template/genny/node.go",
	)
}

var _template_genny_node_test_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcf\x6a\xf3\x30\x10\xc4\xcf\xda\xa7\x58\x7c\x08\xd6\xf7\x19\xab\xe7\xd2\xf4\x18\xc8\xc5\x04\x92\x7b\x91\xec\x75\x2c\x62\x4b\xaa\xfe\x50\x9a\x90\x77\x2f\x52\x92\x06\x7a\xd3\x68\xf4\x9b\x59\xad\x93\xfd\x49\x1e\x09\x3f\x13\xf9\x6f\x00\xbd\x38\xeb\x23\xd6\xc0\xaa\x48\x21\x6a\x73\xac\x00\x98\xc2\xea\xa8\xe3\x94\x54\xdb\xdb\x45\x9c\xe4\x39\x89\x51\x85\x89\x66\x47\x5e\x14\x52\x28\x19\xa8\x02\x0e\x30\x26\xd3\xe3\x81\x42\xfc\x08\x24\x7d\x3f\x6d\xcd\x68\xeb\x88\xff\xee\x71\xed\x81\xe3\x05\x80\x49\x7c\x5d\x63\x47\x5f\x9d\x1d\xa8\x93\x0b\xd5\x1c\x98\x10\x0f\xb5\xd1\x34\x0f\xa1\x4b\xcb\xd6\xe8\x98\xad\xde\x9a\x21\x13\x39\xbd\x76\x36\xa0\x36\xb1\x41\x6d\x46\x8b\xaa\xcd\x15\x1c\x95\xb5\x33\x5e\x80\x31\x4f\x31\x79\x53\xcc\x76\x67\x03\xbe\xad\x31\x13\xab\x15\xd6\x8f\xbb\xff\xe5\xb0\xd7\x67\xe2\xf8\x9e\x5d\x60\x4c\x88\x3b\x18\x7d\x22\x60\x57\x60\x9e\xfa\x8d\xf9\x6d\x0d\xa8\xda\x3c\xdf\x4e\xc6\xe9\x4f\xf5\xa5\xe0\xb9\x39\xa4\x39\xe2\x1a\xa5\x73\x64\x86\xfa\xa6\x1b\x0c\xfc\xfe\x20\x53\xe1\xe9\x17\x79\xcb\xe2\xa5\x51\xb6\xfb\xe7\xd2\x5e\x1a\x2c\x13\x34\x98\x7f\xcf\x01\xae\xf0\x13\x00\x00\xff\xff\x79\x9d\x3b\x9e\xae\x01\x00\x00")

func template_genny_node_test_go() ([]byte, error) {
	return bindata_read(
		_template_genny_node_test_go,
		"../template/genny/node_test.go",
	)
}

var _template_genny_root_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\x0e\x06\xf9\xd5\x90\x9a\x1f\x18\x45\x50\x1f\xea\x02\x69\x03\x04\x0e\x90\x26\xa7\xa2\x07\x49\x5e\x39\x44\x64\x52\x25\xa9\x26\x8e\xe1\x77\x2f\x48\xea\x87\xb1\x9d\x34\xe8\xa5\x37\x71\x76\x76\xb8\x3b\xbb\xa6\xeb\xac\xb8\xcf\x96\x08\x3f\x1b\x54\x6b\x42\xf8\xaa\x96\xca\x00\x25\x51\xcc\x65\x4c\xa2\x58\x1b\x55\x48\xf1\x2b\x26\x24\x2a\xab\xcc\xe4\x4d\x59\xa2\xd2\x10\x2f\xb9\xb9\x6b\xf2\xa4\x90\xab\x74\x29\xe5\xb2\xc2\x34\x08\xa7\x4b\x97\x1b\x70\xee\xb3\xa7\x26\x2d\x73\x7d\x87\x55\x8d\x2a\x75\xb7\xa5\x79\xa6\x31\x26\x8c\x10\xb3\xae\x11\x66\x52\x56\x30\x05\x0b\x26\xf6\xbb\x45\xd7\x06\x7b\x74\x6d\xd0\xa3\x17\xc2\x7c\xe8\x50\xfb\xdd\xa3\x47\x93\x00\x3e\x9a\xf4\xf8\xc9\x71\x80\x9f\x1c\xf7\xf8\xe4\x34\xc0\x27\xa7\x1e\xbf\xe5\x81\xbc\x3b\x0c\xf8\x70\x81\x3f\x0d\x91\xe1\x0a\x7f\x1a\x22\xc3\x25\xfe\xe4\x23\xe7\x95\xcc\x82\xa4\xf6\x18\xc4\x86\xb4\xf6\xd8\x1a\xf5\x59\xae\x56\x52\xcc\xe5\xa2\x37\x66\x40\xf6\x28\x97\x5c\x9b\x43\xb4\xb2\x11\x05\xcc\xf1\x61\xc0\x28\x83\xff\x77\x68\xb0\x21\x91\x42\xd3\x28\x01\xa3\x9d\xd0\x66\x4b\xb6\x87\x54\xec\x7d\x56\x69\xa7\x82\x40\xe8\x79\x24\xd0\xb9\xaa\x51\x50\x05\x5c\x26\xd7\x98\x2d\x50\x8d\xa1\xc8\x6a\xe0\xc2\x30\xb8\x96\xd2\xdc\xd8\xc6\x9c\x8e\x6e\x2a\x03\x67\xd3\x1e\xdd\x0c\x92\x67\xbe\x53\x2f\xe5\x04\xd8\xb6\x4b\x09\xaa\x4f\xe6\xd9\xca\xba\x17\x77\x12\x31\x89\x5c\xe2\x37\x34\x16\xb2\x61\x7a\x38\x8b\xf5\x72\xe7\x68\x8a\xbb\x0b\xb1\xc0\x47\xca\xfa\xf6\x7c\x8c\x44\x69\xda\x02\x6f\x2d\x32\x74\x61\xb6\x9e\x35\x25\xcd\x9b\x12\xbe\xff\xc8\xd7\x06\xff\xce\x80\x5e\xe5\xdf\x58\xd0\x35\x64\xa4\x95\xa3\x79\xbb\x5d\xb3\x4c\xef\xf4\x53\x38\x75\xdb\xcf\xe8\xd9\x7e\xb5\x81\x24\x58\x63\xbf\x85\xc1\xee\x84\x9c\x6e\xcd\xe7\xf8\xe0\xf6\x39\x1f\xdb\xe5\xa1\xc1\xbb\x94\x7c\x41\x73\x7b\x55\x96\x1a\xcd\x0d\xcd\x93\x6b\xfa\x9e\x31\x66\x0b\x97\xf2\x65\x3f\xfd\x0d\x5b\xcf\xfa\x83\x81\x8e\x72\xd8\x14\x29\x07\x4b\xa8\xb0\xe5\x76\x79\x0c\xe6\xf8\x68\x7f\x34\xa1\x29\xda\x64\xca\xd5\x64\xa9\xc9\x25\x0a\xca\x08\x89\x78\xd9\x9f\xed\x6c\xd9\xbb\x53\xf8\x08\x9e\xba\x21\x51\x77\x97\xa5\x90\x68\x4b\x48\x24\xf0\xc1\xfa\xdd\xeb\xcc\xbc\x3f\x8f\xc6\x7e\x50\x97\x68\x65\xf7\xfa\xdf\xef\x16\xa6\xbb\xaf\x45\x4b\x79\x75\x3a\x3d\x63\x77\x36\x6d\x61\xaf\x4f\xa8\x25\x05\x73\x7a\x83\x97\x17\x42\xa3\x32\xd6\x9d\x5a\xea\x31\x68\xfe\x84\xfe\x0d\xd9\x90\xc8\x79\x10\x4c\xf0\x00\x97\xbd\x28\xfc\x35\xd3\xed\x9c\x72\xfb\x4f\xb5\x21\x24\xf4\xfb\xf9\x48\x82\xa1\x75\x72\x9f\x8c\xe4\x54\x83\x36\x8a\x8b\x25\x03\xca\x85\x19\x03\x2a\x25\x15\x73\x5a\xc2\x9d\xec\x14\xda\xbf\xdc\xc4\x67\x30\x37\x75\x1b\xfa\x6f\x0a\x82\x57\x30\x1a\x81\x86\xe9\x14\xe2\x73\x8e\xd5\x62\xde\xac\x62\x37\x7b\xcb\x70\x04\x3b\xf9\xbe\x32\x27\x4a\xb6\xe4\x77\x00\x00\x00\xff\xff\x65\x18\x09\xdf\xe7\x07\x00\x00")

func template_genny_root_go() ([]byte, error) {
	return bindata_read(
		_template_genny_root_go,
		"../template/genny/root.go",
	)
}

var _template_genny_union_alias_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcb\x6a\xeb\x30\x10\x86\xd7\x9e\xa7\x18\xb4\x38\xd8\xe1\x60\xed\x03\x5e\x94\x96\x42\xa1\x09\x85\x92\x75\x91\xed\x89\x2d\xa2\x8b\xab\x4b\x69\x1a\xf2\xee\x45\x0e\x95\xbd\xc8\x6e\xe6\xff\x3f\x7d\x8c\x26\xd1\x9d\xc4\x40\xf8\x19\xc9\x9d\x01\xf8\x06\x06\x32\xe6\x8c\x3a\xfa\x80\x2d\x61\x27\x94\xa2\x1e\x27\x72\x78\x30\xd2\x9a\xbd\xd0\x04\x1b\x0e\x20\xf5\x64\x5d\xc0\x12\x0a\x36\xc8\x30\xc6\xb6\xee\xac\xe6\x27\xf1\x13\xf9\xb1\xf5\x23\xa9\x89\x1c\x9f\xad\xbc\x15\x9e\x18\x54\x00\x5f\xc2\xe1\xd3\x61\xb7\x7b\xfb\xc8\xae\x07\x25\x85\x4f\x03\xb6\xd6\x2a\x6c\x30\xc1\xf5\x3b\x85\xb9\x28\x59\x06\xd9\x7f\x64\x19\x66\x15\xc0\x31\x9a\x0e\x4b\x63\x7b\x5a\x2e\xab\x30\x23\xe5\x6a\xc6\x0b\x14\x9c\x3b\xf2\x51\x05\xdc\x36\x4b\x71\x79\xb4\x5a\x5b\xb3\xb7\x3d\x6d\x31\xa9\xea\x25\xb8\x42\x71\xef\x45\x8e\x57\x28\x36\xf8\x6f\xd9\x56\x48\x5a\x5f\xa5\x0f\xd8\xdc\xec\x7f\xfb\x1d\x47\x3d\x1f\xda\xac\x3f\x99\xa9\x67\x0a\xdd\xf8\x62\x7a\xfa\x2e\xab\x14\x86\xe8\x0c\xde\x3a\xb8\xc2\x6f\x00\x00\x00\xff\xff\xbc\x73\x10\xa1\xc3\x01\x00\x00")

func template_genny_union_alias_go() ([]byte, error) {
	return bindata_read(
		_template_genny_union_alias_go,
		"../template/genny/union-alias.go",
	)
}

var _template_genny_union_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xbd\x6e\xac\x30\x10\x85\x6b\xe6\x29\x8e\x28\x56\x40\x81\x75\xdb\x95\xb6\xba\x75\xe8\xf2\x00\xc6\x0c\xac\xb5\xd8\x26\xfe\x51\x44\x10\xef\x1e\x99\x55\xd8\x28\xcd\x14\x33\xe7\x7c\xf3\x2d\x52\x3d\xe4\xc4\xf8\x48\xec\x57\x22\xd1\x10\x80\x89\xad\x5d\x61\x52\x88\xe8\x19\x4a\xce\x33\x0f\xf8\x87\xa8\x0d\x07\x2c\xec\xd1\xb9\x81\x3b\x69\x98\x1a\x41\xa4\xcd\xe2\x7c\x44\x45\x45\x39\xe9\x78\x4f\x7d\xab\x9c\x11\x0f\xf9\x95\xc4\xd8\x87\x3b\xcf\x0b\x7b\x71\xf0\x45\x2f\x03\x97\x54\x13\xc5\x75\x61\xbc\x5b\xed\x6c\xc6\x20\x44\x9f\x54\xc4\x46\x45\x93\x23\xed\x7f\x67\x8c\xb3\xf9\x0b\xed\x44\x63\xb2\x0a\x1d\x7f\x9e\xf9\xaa\x46\xf3\x2a\x6f\x54\x78\x0e\x69\x8e\xb8\xde\x70\x39\xf7\xdb\x0b\x72\xc5\xe5\x0f\x76\xdb\xf7\x9f\x56\x7b\x40\x6e\x28\xcf\x66\x99\x4f\x31\x79\x8b\x67\xe2\x74\xa8\xac\x1b\x7e\x69\xd7\x78\x63\xd3\xb3\xaf\x34\xb4\x8d\x75\x1e\xec\x47\xa9\x78\xdb\x9f\x52\x07\xc3\xea\x99\x76\xfa\x0e\x00\x00\xff\xff\x89\x66\x96\xee\x68\x01\x00\x00")

func template_genny_union_go() ([]byte, error) {
	return bindata_read(
		_template_genny_union_go,
		"../template/genny/union.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"../template/genny/dummy.go": template_genny_dummy_go,
	"../template/genny/field.go": template_genny_field_go,
	"../template/genny/list.go": template_genny_list_go,
	"../template/genny/node.go": template_genny_node_go,
	"../template/genny/node_test.go": template_genny_node_test_go,
	"../template/genny/root.go": template_genny_root_go,
	"../template/genny/union-alias.go": template_genny_union_alias_go,
	"../template/genny/union.go": template_genny_union_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"..": &_bintree_t{nil, map[string]*_bintree_t{
		"template": &_bintree_t{nil, map[string]*_bintree_t{
			"genny": &_bintree_t{nil, map[string]*_bintree_t{
				"dummy.go": &_bintree_t{template_genny_dummy_go, map[string]*_bintree_t{
				}},
				"field.go": &_bintree_t{template_genny_field_go, map[string]*_bintree_t{
				}},
				"list.go": &_bintree_t{template_genny_list_go, map[string]*_bintree_t{
				}},
				"node.go": &_bintree_t{template_genny_node_go, map[string]*_bintree_t{
				}},
				"node_test.go": &_bintree_t{template_genny_node_test_go, map[string]*_bintree_t{
				}},
				"root.go": &_bintree_t{template_genny_root_go, map[string]*_bintree_t{
				}},
				"union-alias.go": &_bintree_t{template_genny_union_alias_go, map[string]*_bintree_t{
				}},
				"union.go": &_bintree_t{template_genny_union_go, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
